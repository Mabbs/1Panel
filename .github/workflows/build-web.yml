on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 1 * * *'

name: Checkout and Create Release Version

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check Version
        id: get-version
        run: |
          version=$(curl -s 'https://api.github.com/repos/1Panel-dev/1Panel/releases/latest' | jq -r ".tag_name")
          echo "version=${version}" >> $GITHUB_OUTPUT
          sed -i "s@ARG VERSION=.*@ARG VERSION=${version}@" Dockerfile

      - name: Create Tag
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -a "${{ steps.get-version.outputs.version }}" -m "Release ${{ steps.get-version.outputs.version }}"
          git push origin "${{ steps.get-version.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Source
        uses: actions/checkout@v4
        with:
          repository: 1Panel-dev/1Panel
          ref: ${{ steps.get-version.outputs.version }}
          fetch-depth: 0
          sparse-checkout: |
            frontend

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '16.20'

      - name: Build Web
        run: |
          cd frontend
          rm -f package-lock.json
          yarn add codemirror vue-codemirror
          yarn install
          yarn run build:pro
        env:
          NODE_OPTIONS: --max-old-space-size=8192

      - name: Make Files
        run: |
          mkdir -p build
          mv cmd/server/web web-${{ steps.get-version.outputs.version }}
          tar -czf build/web-${{ steps.get-version.outputs.version }}.tar.gz web-${{ steps.get-version.outputs.version }}
          echo "$(sha256sum build/web-${{ steps.get-version.outputs.version }}.tar.gz | awk '{print $1}')  web-${{ steps.get-version.outputs.version }}.tar.gz" > build/web-${{ steps.get-version.outputs.version }}.tar.gz.sha256

      - name: Create Release
        run: |
          gh release create ${{ steps.get-version.outputs.version }} --notes "Release ${{ steps.get-version.outputs.version }}"
          gh release upload ${{ steps.get-version.outputs.version }} build/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}